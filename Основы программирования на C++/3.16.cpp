//Структуры данных. Пользовательские (составные) типы

3.16 - Структуры данных. Пользовательские (составные) типы

Мы наверное истомину набьем, говоря, что каждая новая глава расскажет вам о более удобном механизме в языке программирования. НО - оно так и есть. Программисты вообще люди ленивые и, если что-то можно сделать легче, они это упрощают. Аналогично сложилось и с Структурами данных - они просто упрощают процесс работы с большим объемом данных внутри программы. Но по сложившейся традиции, давайте начнем с накидывания проблем!

Часть 1 - Тяжелая жизнь программиста или зачем нужны Структуры?

В жизни мало какой объект можно описать одним словом, параметром или ответом Да/Нет. В сущности вообще ничего - любой реальный объект описывается целым набором разнообразных свойств, параметров или значений. А так как программирование все таки должно решать реальные жизненные ситуации, то программистам приходится всю эту информацию как то записывать и хранить. 

Для примера давайте попробуем описать пользователя социальной сети. Вот где уж точно понадобится целый ворох данных - ФИО, Возраст, Телефон, Электронная почта, Музыка, Видео и далее далее далее. Перечислять можно очень долго, пока у нас не начнет глаз дергаться от попыток все это представить в программе, так что давайте сойдемся всего на нескольких параметрах - ФИО, Возраст, Телефон и Пол. Да, мы умышленно подобрали разнотиповые данные, которые вы не сможете хранить в одной переменной. Вернее, можно, конечно, загнать все это в std::string, но поверьте - работа будет мало приятной, да и производительность приложения будет оставлять желать лучшего.

К коду:
{
    std::string FIO; // Наше ФИО
    int Age; // Возраст
    std::string PhoneNumber; // Номер телефона
    bool Sex; // Пол
};

Итак мы имеем все необходимые переменные для хранения информации и вроде бы все хорошо. 

Но есть маленькая проблема - второй пользователь. Как сохранить его информацию и не потерять информацию первого? Все просто - давайте создадим еще переменных для него и все будет в порядке! Да, будет, до третьего пользователя. 

А теперь представим, что их 5? 10? 100? 1000? А переменных у нас уже 5000 и во всей этой вакханалии нужно как то ориентироваться, работать и проводить необходимые для социальной сети процессы. 

Вишенкой на торте будет добавление нового поля к уже существующим! Например - школа, в которой учился пользователь или место его работы. И это нужно добавиьт к КАЖДОМУ пользователю. Кажется где-то слышиться плач одинокого программиста...

Можно поспорить - создать по массиву на каждый параметр! Да, можно. Но синхранизация информации между этими массивами - то есть так расположить данные, что бы в разных массивах информация об одном и том же пользователе стояла за одними и теми же номерами - дело совсем не простое и малоприятное. К тому же никаких гарантий!

Но, давайте вернемся к проблеме - нам нужна такая вещь, которая сможет объединить в себе всю нужную нам информацию об объекте и позволит быстро создавать, заносить, читать, изменять и модифицировать поля, а так же сделает так, что бы у всех объектов поля были одинаковые, а еще неплохо было бы добавить инициализацию по-умолчанию к этим полям, что бы пользователь мог указывать не всю информацию и вы не стали филиалом известной службы, вместо социальной сети. Получилось как-то сложно.

Давайте проще - нам нужна вещь в которую мы сможем положить всю необходимую информацию об объекте и потом, без лишних сложностей, размножить ее и работать. Да, вот такая вещь нам нужна! И именно таковой являются структуры!

Часть 2 - Создаем свою коробоку или Как описываются Структуры?

