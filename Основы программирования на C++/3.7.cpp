//Тема функций

Глава 3.7 - Функции

Функции это весьма интересная и обширная тема.Функции решат массу проблем, в первую очередь связанных с удобством работы кода и заканчивая банальной оптимизацией процессов, которые происходят внутри ваших программ.
Но, если начинать пытаться объяснить - Что такое функция ? И зачем она нужна ? -определенно, в начале, стоит накинуть несколько проблем, которые привели к появлению функций.

Часть 1 - Не бывает слишком много кода... или бывает ?

Итак, представим следующую ситуацию - Вы создаете программу, которая вычисляет периметр и площадь прямоугольника.Для тех, кто забыл школьную программу, напомню, что периметр прямоугольника равен удвоенной сумме его длины и ширины, а площадь произведению тех же длины и ширины.В поставленной задаче все кажется простым - принимаем два числа(ширина и длина прямоугольника) от пользователя и вычисляем по ним необходимые параметры.НО пришел заказчик и сказал - Хочу, чтобы программа еще и объем параллелепипеда с этим прямоугольником в основании!Вы, как программист, отвечаете, что нет проблем, запрашиваете у пользователя высоту и умножаете ее на площадь прямоугольника.Все, можно в релиз ?
Нет, нельзя.Почему ? Потому что заказчик снова пришел и потребовал, что бы у нас был выбор какую фигуру мы сейчас хотим вычислить.Вы скрепя зубами, вносите новые правки, ставя switch и надеясь, что больше правок то не будет.Но через месяц заказчик приходит и накидывает еще требования на 3 фигуры в разных измерениях.
И вот так, постепенно, ваша программа превращается в длинную простыню кода, которую нужно после вас еще кому - то поддерживать.Легко ли это будет ? Естественно нет, вы сами то через месяц забудете половину функционала, а через год каждая ошибка в коде будет отзываться болью в голове.Это и есть проблема номер 1 - без использования функций, получается длинный, плохо читаемый и самое главное непрерывный код, поддержка которого сложна сама по себе из - за проблем поиска ошибок и попыток понимания, что к ним привело.
Проще говоря, ваш код выглядит как одна большая простыня и понять что и где в ней крайне сложно.Это мы еще о переменных не вспоминали - с ними в этом случае твориться отдельный ад.
НО давайте вернемся к первоначальным правкам нашего неуемного заказчика.Напомню, что он захотел, чтобы ваша программа вычисляла нужные параметры как для прямоугольника, так и для параллелепипеда.Однако, чем по сути отличается площади основания параллелепипеда и площадь прямоугольника ? Ответ - ничем.Это одно и то же измерение, которое выполняется по одной и той же формуле.Но сейчас, в вашей программе, придется фактически сделать два одинаковых участка кода - первый вычисляет площадь прямоугольника, а второй площадь основания параллелограмма.И это как раз проблема номер 2 - без использования функций в вашем коде начнется множественное повторение участков, которые по сути своей будут выполнять одни и те же действия.
Проще говоря, вы будете повторять один и тот же код несколько раз, вместо того, что бы использовать уже ранее наработанный.

Оговорка - тут стоит сказать, что рассмотренная задача крайне простой случай, специально придуманный для наглядности.В реальной кодовой базе проблема повторного использования кода может быть далеко не столь явной и попросту скрываться за сложной логикой приложения.А если говорить о микро сервисной архитектуре, так вообще невозможно будет до нее докопаться.Поэтому не стоит относиться к этому с пофигизмом - повторюсь, мы специально упростили задачу.

Итак, мы имеем две большие проблемы :
1 - Наш код выглядит, как одно полотно, которое руки так и чешутся разбить на блоки, для более простого понимания
2 - Помимо этого в нашем коде еще и множество повторений, которые делают одно и тоже и очень просятся под нож.

Часть 2 - Двух зайцев одним выстрелом

Собственно эти две проблемы и решают функции в первую очередь. Они разбивают код на отдельные блоки, каждый из которых позже вы сможете протестировать и разобрать на липовый цвет и мед, в смысле на ошибки и исключения, а так же позволяет вызывать эти самые блоки в любом месте кода необходимое количество раз, без повторения самого куска кода.Из всего вышеописанного вытекает ответ на вопрос - Зачем нужна функция ? А вот теперь мы дадим определение, которое ответит на вопрос - Что такое функция ?

Определение - Функция - это именованная область кода, которая принимает в себя некоторые значения(параметры или аргументы) и возвращает(или не возвращает) некоторый ответ после своих действий.

Ничего не понятно ? Мозг подвис ? Все нормально, сейчас разберемся.
Начнем буквально по словам.В первую очередь функция - это именованная область кода.Что это значит ? Все довольно просто - у функций есть имя, по которому их можно вызвать, и собственный код, который они выполняют.Первая функция, которую вы все уже писали и переписывали множество(мы надеемся, что множество) раз - это функция main.Ее имя собственно main, а область кода, за которую она отвечает, это тот самый код, который вы писали в своих программах ранее.Теперь чуть подробнее.

Имя функции подчиняется общим правилам именования всего в языке С++.Так как мы их рассматривали ранее, здесь не будем повторяться полностью, а лишь приведем краткий список :
1) Имя не может начинаться с цифры, хотя может их содержать
2) Имя не может состоять из пробелов или содержать специальные символы, кроме _
3) Имя не может использовать ключевые слова Языка Программирования C++
4) Имя не может состоять или содержать русские(кириллические) символы.
Так же, ранее, для переменных вам говорили, что имена не могут повторяться и в функциях, в целом, это правило сохраняется.Однако есть такое явление, как перегрузка функций, о котором пойдет речь позже, где используются одинаковые имена у разных функций.Поэтому давайте договоримся так формулировать - Имена у РАЗНЫХ по функционалу функций обязаны быть разными(тавтология наше все).

Еще к функциям есть несколько дополнительных требований :
1) Если функция отвечает на какой - то вопрос, например строка ли то что ей передали - ее имя должно начинаться с приставки is - isString, isMain, isVasa
2) Если функция выполняет преобразование из одного типа в другой, то ее имя принято начинать с приставки from - fromString, fromBool, fromCat(злой хохот)
и так далее.
Но эти правила являются скорей удобством, чем жестким требованием самого языка и учатся в ходе практики, так как без серьезной задачи вы вряд - ли набьете руку в именах.В конце главы будут приведены несколько приставок, наиболее распространенных среди программистов.Постарайтесь их запомнить и использовать.

Область кода же, практически, ничем не ограничена, кроме вашей фантазии и фигурных скобок - {}. Функции бывают как однострочными, так и больше даже основной программы.Но тут нам хотелось бы уточнить вот какой момент / правило - одна ноша в одни руки.То есть каждая функция должна выполнять только ТО, что от нее ожидается и это далеко не так очевидно, как может показаться.
Например, возвращаясь к нашей задаче о прямоугольнике, должна быть функция, которая считает его площадь.НО - она только считает площадь и возвращает ее значение, не выводя ее в консоль!Сейчас вам будет казаться, что это лишняя трата времени и почему бы просто не вывести там где удобнее, но это один из тех моментов, когда нужно принять как есть, а понять потом.Загвоздка здесь именно в том, что от вызова функции ожидают, что она просто посчитает необходимое значение, а не станет еще куда - то его выбрасывать дополнительно.Так обеспечивается предсказуемость поведения кода, а это очень важный аспект, когда вы работаете над большим проектов, да еще и в команде. Поэтому запомните и возьмите за правило - Функция ОБЯЗАНА выполнять только те действия, которые от нее ожидают.

Часть 3 - Как создать функцию?

Теперь давайте, наконец, опишем шаблон для создания функций и далее уже полностью его разберем:

Шаблон: 
	Возвращаемый_тип Имя_Функции(параметры_функции)
	{
		тело_функции
	}

Как можно заметить, если откинуть тело функции и ее параметры, вы увидите обычную переменную и это далеко не просто так. Сейчас мы не будем углубляться в эту тему, но ниже вы еще вспомните об этом сравнении и научитесь даже создавать переменные, в которых лежат функции. Сейчас же давайте рассмотрим, что находится в шаблоне:
	1) Возвращаемый_тип - это тип данных, который возвращает функция туда, где была вызвана. Например, если функция должна сложить два целых числа и вернуть их сумму, то ее возвращаемый тип будет int. 
	2) Имя_Функции - это, как и говорилось ранее, имя, по которому вы будете обращаться к функции и вызывать ее для исполнения ее работы. 
	3) Параметры_функции - это то, что необходимо передать функции для ее работы. Например, если функция должна взять два числа для их сложения, то в параметрах указывается две переменных, в которые будут записаны эти значения и внутри функции можно будет использовать именно эти переменные.
	4) Тело_функции - это, как и говорилось ранее, код, который будет исполняться при вызове функции. Важно отметить, что для читаемости кода необходимо оставлять фигурные скобки на отдельных строчках, как это показано в шаблоне. Самому коду не будет никакой разницы, а вот ваши будущие коллеги будут благодарны вам за подобное следование этому требованию.

Как видите, в описании функции нет ничего сложного, немного практики и вы быстро привыкните их создавать, описывать и использовать в своем коде. А теперь давайте разберем новые понятия поподробнее. 

Часть 4 - Ты мне два яблока, я тебе одно... 

	Возвращаемый тип данных функции это весьма не простая вещь, как это может показаться на первый взгляд. Функция буквально может возвращать любой из известных вам типов во всех их вариациях. Важно только понимать, что же вы возвращаете и собственно выполнить это возвращаение. Но для начала ответим на вопрос вообще зачем нужен возвращаемый тип? 

	А необходимо он для того, что бы она сама фукнция могла понимать, что вы хотите получить после ее работы, а так же это даст возможность использовать результат функции в качестве значения для переменных или напрямую в каких то местах, вместо самих переменных. Не волнуйтесь, мы не оставим этот момент без внимания и позже, на примерах, покажем о чем вообще идет речь.

	Для того, что бы вернуть то, что нам необходимо из функции, нужно использовать ключевое слово return в теле функции. 
	Например:
	int Sum ()
	{
		int Seven = 5 + 2;
		return Seven;
	}

	В нашем примере мы создали функцию Sum, которая вернет нам сумму чисел 5 и 2, то есть 7, значение которых записано в одноименной переменной. По правде говоря, можно было обойтись вовсе без переменной и записать просто return 5 + 2;, но так работают с return редко, поэтому основной пример все таки создает переменную. 

	ВАЖНО - Если вы можете обойтись без лишних переменных, лучше обходится без них. Это сэкономит память и уменьшит время работы функции до минимума. Помните - оптимизация наше все!

	


Возвращаемый_тип.
	